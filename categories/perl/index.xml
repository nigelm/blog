<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>perl on Nailing Jelly</title>
    <link>https://blog.dotdot.cloud/categories/perl/</link>
    <description>Recent content in perl on Nailing Jelly</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Jun 2009 19:52:01 +0000</lastBuildDate><atom:link href="https://blog.dotdot.cloud/categories/perl/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CPAN RPM  Packaging</title>
      <link>https://blog.dotdot.cloud/2009/06/03/cpan-rpm-packaging/</link>
      <pubDate>Wed, 03 Jun 2009 19:52:01 +0000</pubDate>
      
      <guid>https://blog.dotdot.cloud/2009/06/03/cpan-rpm-packaging/</guid>
      <description>Seeing as I have been asked about building RPM packages of CPAN modules today I thought it was worth putting some information down in a blog post - I would love comments on this, so that I can improve the information and hopefully make my processes better.
Firstly, I target Centos 4 and 5 i386 only, although I am going to have to start building for x86_64 too) and build stuff for our own internal requirements, the latter meaning that the stuff I package depends very much one what I need for work at the time.</description>
    </item>
    
    <item>
      <title>XML Processing</title>
      <link>https://blog.dotdot.cloud/2009/06/01/xml-processing/</link>
      <pubDate>Mon, 01 Jun 2009 20:56:05 +0000</pubDate>
      
      <guid>https://blog.dotdot.cloud/2009/06/01/xml-processing/</guid>
      <description>Recently I have had to revisit one of our systems that deal with XML call records (from a VOIP switch).
This system splits out Call Detail Records (CDRs) by customer. The version of this that was running was based on XML::Twig which used to run acceptably fast (this code was written a number of years ago), and has the advantage of being relatively light on memory as the document was processed a chunk at a time rather than being completely read into memory.</description>
    </item>
    
    <item>
      <title>Extending SQL::Abstract</title>
      <link>https://blog.dotdot.cloud/2009/05/11/extending-sqlabstract/</link>
      <pubDate>Mon, 11 May 2009 19:48:28 +0000</pubDate>
      
      <guid>https://blog.dotdot.cloud/2009/05/11/extending-sqlabstract/</guid>
      <description>Most of the perl I write currently has ties into DBIx::Class and hence uses SQL::Abstract.
I also have far too much of a preference for boolean items, which I normally encode in the database as a column of type boolean (or the SQLite vague equivalent).
Its been fairly easy to encode a test for boolean value being true with SQL::Abstract - although the syntax
column =&amp;gt; \&#39;&#39;  which maps to</description>
    </item>
    
    <item>
      <title>Theatre Management with Perl - 1</title>
      <link>https://blog.dotdot.cloud/2009/05/03/theatre-management-with-perl-1/</link>
      <pubDate>Sun, 03 May 2009 21:24:39 +0000</pubDate>
      
      <guid>https://blog.dotdot.cloud/2009/05/03/theatre-management-with-perl-1/</guid>
      <description>First some history - in fact this post is almost all history and setting the scene for what we did later.
When I joined the theatre there was a website - however it had been done by someone&amp;rsquo;s friend, and was a flash only movie containing information on the shows that were coming in the near future. This suffered massively from being done in spare time and could take months to get updated, so something had to be done.</description>
    </item>
    
    <item>
      <title>Enlightened Ironman?</title>
      <link>https://blog.dotdot.cloud/2009/04/27/enlightened-ironman/</link>
      <pubDate>Mon, 27 Apr 2009 12:37:11 +0000</pubDate>
      
      <guid>https://blog.dotdot.cloud/2009/04/27/enlightened-ironman/</guid>
      <description>Following the blog post and proposal from Matt Trout, I&amp;rsquo;m going to aim to push out some posts on my uses and experiences of perl. I&amp;rsquo;m extraordinarily unlikely to hit the Ironman rating since a look back at my history shows the occaisional year between posts :-)
Anyhow, as an ancient perl user (I pulled a perl release from usenet back sometime around 1988/89), I have quite a lot of odds of perl around, although mostly I have been pretty good at retiring the stuff that has outstayed its useful life.</description>
    </item>
    
  </channel>
</rss>
